1.简单工厂
 1.1 结构
     1.1.1 一个抽象产品类
     1.1.2 多个具体产品类
     1.1.3 一个工厂类
 1.2 缺点
     1.2.1 简单工厂违反开发封闭原则，每增加一个新的产品类都要修改工厂类

 1.3 优点
     1.3.1 新增对象时不需要修改客户端代码，遵循开放封闭原则
     1.3.2 解耦:客户端不需要知道具体产品实例的创建方法，只需要知道简单工厂类即可以创建具体对象
 1.4 应用场景
     1.4.1 根据不同服务类型，获取不同地图实例
     1.4.2 想隔离具体对象的实现
     1.4.3 想把创建对象的职责集中管理起来
2.工厂方法
 2.1 结构
     2.1.1 一个抽象产品类
     2.1.2 多个具体产品类
     2.1.3 一个抽象工厂类
     2.1.4 多个具体工厂类
 2.2 缺点
     2.2.1 客户端获取对象时，需要修改客户端代码，违反开放封闭原则
 2.3 优点
     2.3.1 扩展性好，新增产品时，只需要新增对应的产品类和工厂类即可，遵循了开放封闭原则
     2.3.2 屏蔽产品类，客户端获取一个产品实例时，不需要关心实例创建具体细节
 2.4 应用场景
     2.4.1 一个类不想知道创建实例的具体类

3.抽象工厂方法
  3.1 结构
     3.1.1 多个抽象产品类
     3.1.2 多个具体实现产品类
     3.1.3 一个抽象工厂类
     3.1.4 多个具体产品工厂类
  3.2 缺点
     3.2.1 如果产品增加新功能，则需要修改所以的工厂类，违反开放封闭原则
  3.3 优点
     3.3.1 能生产不同产品族的产品，而工厂方法和简单工厂方法只能生产单一的产品。
  3.4 应用场景
     3.4.1 当需要创建一个产品系列时
4.三种工厂的区别与联系
  4.1 联系
     4.1.1 扩展关系
       工厂方法是在简单工厂方法的基础上进行的扩展，而抽象工厂方法则是在工厂方法的基础上进行的扩展
  4.2 对比
     4.2.1 简单工厂和工厂方法
       1.区别
         1.1 简单工厂通过一个工厂类来管理对象的创建；工厂方法把创建实例延迟到子类进行实现
         1.2 当新增一个产品时，简单工厂需要修改工厂类，违背了开放封闭原则；工厂方法则通过创建一个新的产品类和工厂类来实现
       2.联系
         2.1 工厂方法是在简单工厂的基础上进行的扩展

     4.2.2 简单工厂和抽象工厂
         1.抽象工厂用来生产一个产品系列，产品之间存在耦合；简单工厂用来做产品选择实现，产品之间没有依赖关系

     4.2.3 工厂方法和抽象工厂
         1.抽象工厂是在工厂方法的基础是上扩展来的
         2.工厂方法用来生产单独的产品，而抽象工厂用来生产一个产品系列